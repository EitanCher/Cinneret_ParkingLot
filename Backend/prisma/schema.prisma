generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model test_table {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
}

model Cities {
  idCities    Int     @id @default(autoincrement())
  CityName    String  @unique @db.VarChar(45)
  FullAddress String  @db.VarChar(255) // New field for the full address
  Gates       Gates[]
  Areas       Areas[] // Relation to Areas
}

model Areas {
  idAreas  Int     @id @default(autoincrement())
  AreaName String  @unique @db.VarChar(45)
  CityID   Int
  Cities   Cities  @relation(fields: [CityID], references: [idCities], onDelete: NoAction, onUpdate: NoAction)
  Slots    Slots[] // Relation to Slots
}

model Borders {
  idBorders                        Int     @id @default(autoincrement())
  Violated                         Boolean
  Slots_Slots_BorderLeftToBorders  Slots[] @relation("Slots_BorderLeftToBorders")
  Slots_Slots_BorderRightToBorders Slots[] @relation("Slots_BorderRightToBorders")
}

model Cars {
  idCars         Int            @id @default(autoincrement())
  RegistrationID String         @unique @db.VarChar(11)
  Model          String         @db.VarChar(45)
  OwnerID        Int
  Users          Users          @relation(fields: [OwnerID], references: [idUsers], onDelete: NoAction, onUpdate: NoAction)
  ParkingLog     ParkingLog[]
  Reservations   Reservations[] @relation("CarReservations")
}

model Gates {
  idGates  Int     @id @default(autoincrement())
  Entrance Boolean
  CityID   Int
  Fault    Boolean
  Cities   Cities  @relation(fields: [CityID], references: [idCities], onDelete: Cascade, onUpdate: NoAction)
}

model ParkingLog {
  idParkingLog  Int           @id @default(autoincrement())
  CarID         Int
  SlotID        Int
  Entrance      DateTime      @db.Timestamptz(6)
  Exit          DateTime      @db.Timestamptz(6)
  Violation     Boolean
  ReservationID Int? // New field to link to Reservations
  Cars          Cars          @relation(fields: [CarID], references: [idCars])
  Slots         Slots         @relation(fields: [SlotID], references: [idSlots])
  Reservations  Reservations? @relation(fields: [ReservationID], references: [idReservation]) // Link to Reservations
}

model SlotSizes {
  idSlotSizes Int     @id @default(autoincrement())
  Size        String  @unique @db.VarChar(45)
  Slots       Slots[]
}

model Slots {
  idSlots                            Int            @id @default(autoincrement())
  Busy                               Boolean
  AreaID                             Int
  BorderLeft                         Int
  BorderRight                        Int
  Size                               Int
  Active                             Boolean
  Fault                              Boolean
  ParkingLog                         ParkingLog[]
  Areas                              Areas          @relation(fields: [AreaID], references: [idAreas], onDelete: NoAction, onUpdate: NoAction)
  Borders_Slots_BorderLeftToBorders  Borders        @relation("Slots_BorderLeftToBorders", fields: [BorderLeft], references: [idBorders], onDelete: NoAction, onUpdate: NoAction)
  Borders_Slots_BorderRightToBorders Borders        @relation("Slots_BorderRightToBorders", fields: [BorderRight], references: [idBorders], onDelete: NoAction, onUpdate: NoAction)
  SlotSizes                          SlotSizes      @relation(fields: [Size], references: [idSlotSizes], onDelete: NoAction, onUpdate: NoAction)
  Reservations                       Reservations[] @relation("SlotReservations")
}

model SubscriptionPlans {
  idSubscriptionPlans   Int                 @id @default(autoincrement())
  Name                  String              @unique @db.VarChar(45)
  Price                 Decimal             @db.Decimal(10, 2)
  MaxCars               Int
  MaxActiveReservations Int                 @default(0) // New field for max active reservations
  Features              String[]
  UserSubscriptions     UserSubscriptions[]
}

model UserSubscriptions {
  idUserSubscriptions Int      @id @default(autoincrement())
  UserID              Int
  SubscriptionPlanID  Int
  StartDate           DateTime @db.Date
  EndDate             DateTime @db.Date
  Status              String   @db.VarChar(20)
  StripeSessionId     String?  @db.VarChar(255) // Optional field

  SubscriptionPlans SubscriptionPlans @relation(fields: [SubscriptionPlanID], references: [idSubscriptionPlans], onDelete: NoAction, onUpdate: NoAction, map: "SubscriptionPlan_fk")
  Users             Users             @relation(fields: [UserID], references: [idUsers], onDelete: Cascade, onUpdate: NoAction, map: "User_fk")

  @@unique([UserID, Status]) // Ensure one active subscription per user
}

model Users {
  idUsers           Int                 @id @default(autoincrement())
  persId            String              @db.VarChar(9)
  FirstName         String              @db.VarChar(40)
  LastName          String              @db.VarChar(45)
  Phone             String              @db.VarChar(20)
  Email             String              @unique @db.VarChar(100)
  Password          String              @db.VarChar(255)
  Cars              Cars[]
  UserSubscriptions UserSubscriptions[]
  Reservations      Reservations[]      @relation("UserReservations")
  violations        Int                 @default(0) // New field to track violations
}

model Reservations {
  idReservation    Int          @id @default(autoincrement())
  UserID           Int
  CarID            Int
  SlotID           Int
  ReservationStart DateTime     @db.Timestamptz(6)
  ReservationEnd   DateTime     @db.Timestamptz(6)
  Status           String       @default("pending") @db.VarChar(20) // Add status field
  Slots            Slots        @relation("SlotReservations", fields: [SlotID], references: [idSlots])
  Cars             Cars         @relation("CarReservations", fields: [CarID], references: [idCars])
  Users            Users        @relation("UserReservations", fields: [UserID], references: [idUsers])
  ParkingLogs      ParkingLog[] // Relation to ParkingLog
}
