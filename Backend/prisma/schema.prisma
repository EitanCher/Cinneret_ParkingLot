generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model test_table {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
}

model Cities {
  idCities    Int     @id @default(autoincrement())
  CityName    String  @unique @db.VarChar(45)
  FullAddress String  @db.VarChar(255)
  pictureUrl  String? @db.VarChar(255)
  Areas       Areas[] @relation("CityAreas")
  Gates       Gates[] @relation("CityGates")
}

model Areas {
  idAreas  Int     @id @default(autoincrement())
  AreaName String  @unique @db.VarChar(45)
  CityID   Int
  Cities   Cities  @relation("CityAreas", fields: [CityID], references: [idCities], onDelete: Cascade)
  Slots    Slots[]
}

model Cars {
  idCars         Int            @id @default(autoincrement())
  RegistrationID String         @unique @db.VarChar(11)
  Model          String         @db.VarChar(45)
  OwnerID        Int
  Users          Users          @relation(fields: [OwnerID], references: [idUsers], onDelete: NoAction, onUpdate: NoAction)
  ParkingLog     ParkingLog[]
  Reservations   Reservations[] @relation("CarReservations")
}

model Gates {
  idGates  Int     @id @default(autoincrement())
  Entrance Boolean
  Fault    Boolean
  CityID   Int
  CameraIP String  @unique @db.VarChar(15)
  GateIP   String  @unique @db.VarChar(15)
  Cities   Cities  @relation("CityGates", fields: [CityID], references: [idCities], onDelete: Cascade)
}

model ParkingLog {
  idParkingLog  Int           @id @default(autoincrement())
  CarID         Int
  SlotID        Int
  Entrance      DateTime      @db.Timestamptz(6)
  Exit          DateTime      @db.Timestamptz(6)
  Violation     Boolean
  ReservationID Int?
  NeedToExitBy  DateTime      @db.Timestamptz(6)
  Cars          Cars          @relation(fields: [CarID], references: [idCars])
  Reservations  Reservations? @relation(fields: [ReservationID], references: [idReservation])
  Slots         Slots         @relation(fields: [SlotID], references: [idSlots])
}

model Slots {
  idSlots      Int            @id @default(autoincrement())
  Busy         Boolean?       @default(false)
  BorderRight  Int
  Active       Boolean?       @default(true)
  Fault        Boolean?       @default(false)
  AreaID       Int
  CameraIP     String?        @unique @db.VarChar(15)
  SlotIP       String?        @unique @db.VarChar(15)
  ParkingLog   ParkingLog[]
  Reservations Reservations[] @relation("SlotReservations")
  Areas        Areas          @relation(fields: [AreaID], references: [idAreas], onDelete: Cascade)
}

model SubscriptionPlans {
  idSubscriptionPlans   Int                 @id @default(autoincrement())
  Name                  String              @unique @db.VarChar(45)
  Price                 Decimal             @db.Decimal(10, 2)
  MaxCars               Int
  Features              String[]
  MaxActiveReservations Int                 @default(0)
  StripePriceId         String?             @db.VarChar(255) // Keep this line
  UserSubscriptions     UserSubscriptions[]
}

model UserSubscriptions {
  idUserSubscriptions Int      @id @default(autoincrement())
  UserID              Int
  SubscriptionPlanID  Int
  StartDate           DateTime @db.Date
  EndDate             DateTime @db.Date
  Status              String   @db.VarChar(20)
  StripeSessionId     String?
  SubscriptionId      String?  @db.VarChar(255)

  SubscriptionPlans SubscriptionPlans @relation(fields: [SubscriptionPlanID], references: [idSubscriptionPlans], onDelete: NoAction, onUpdate: NoAction, map: "SubscriptionPlan_fk")
  Users             Users             @relation(fields: [UserID], references: [idUsers], onDelete: Cascade, onUpdate: NoAction, map: "User_fk")

  @@unique([UserID, Status])
}

model Users {
  idUsers           Int                 @id @default(autoincrement())
  persId            String              @db.VarChar(9)
  FirstName         String              @db.VarChar(40)
  LastName          String              @db.VarChar(45)
  Phone             String              @db.VarChar(20)
  Email             String              @unique @db.VarChar(100)
  Password          String              @db.VarChar(255)
  Violations        Int                 @default(0) @map("Violations") // Correct column name and map it to the existing database column
  Role              String              @default("user") @map("Role") // Correct column name and map it to the existing database column
  Cars              Cars[]
  Reservations      Reservations[]      @relation("UserReservations")
  UserSubscriptions UserSubscriptions[]
}

model Reservations {
  idReservation    Int          @id @default(autoincrement())
  UserID           Int
  CarID            Int
  SlotID           Int
  ReservationStart DateTime     @db.Timestamptz(6)
  ReservationEnd   DateTime     @db.Timestamptz(6)
  Status           String       @default("pending") @db.VarChar(20)
  ParkingLogs      ParkingLog[]
  Cars             Cars         @relation("CarReservations", fields: [CarID], references: [idCars])
  Slots            Slots        @relation("SlotReservations", fields: [SlotID], references: [idSlots])
  Users            Users        @relation("UserReservations", fields: [UserID], references: [idUsers])
}
